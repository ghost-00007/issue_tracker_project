name: Deploy Django App to Ubuntu Server

on:
  push:
    branches:
      - main

env:
  APP_NAME: issuetrackerdev
  APP_DIR: /home/ec2-user/apps/
  DEPLOY_DIR: /home/ec2-user/apps/issuetrackerdev
  WORKING_DIR: /home/ec2-user/apps/issuetrackerdev/issue_tracker_project/
  MANAGE_PATH: /home/ec2-user/apps/issuetrackerdev/issue_tracker_project/
  GUNICORN_SERVICE: issuetrackerdev.service
  GUNICORN_SOCKET: issuetrackerdev.socket
  NGINX_CONF_SRC: /home/ec2-user/service/issuetrackerdev
  NGINX_CONF_DEST: /etc/nginx/sites-available/issuetrackerdev

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Deploy via SSH to Remote Server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.REMOTE_SSH_KEY }}
          port: 22
          script: |
            APP_NAME=issuetrackerdev
            APP_DIR=/home/ec2-user/apps/
            DEPLOY_DIR=/home/ec2-user/apps/$APP_NAME
            WORKING_DIR=$DEPLOY_DIR/issue_tracker_project/issue_tracker_project/
            MANAGE_PATH=$DEPLOY_DIR/issue_tracker_project/
            GUNICORN_SERVICE=$APP_NAME.service
            GUNICORN_SOCKET=$APP_NAME.socket
            NGINX_CONF_SRC=/home/ec2-user/service/$APP_NAME
            NGINX_CONF_DEST=/etc/nginx/sites-available/$APP_NAME

            echo "Deploying app: $APP_NAME"

            if [ ! -d "$DEPLOY_DIR" ]; then
              sudo mkdir -p "$DEPLOY_DIR"
              sudo chmod -R 777 "$DEPLOY_DIR"
            fi

            if [ -d "$DEPLOY_DIR/.git" ]; then
              cd $DEPLOY_DIR && git reset --hard HEAD && git clean -fd && git pull origin main
            else
              git clone https://github.com/${{ github.repository }} $DEPLOY_DIR
            fi

            cd $WORKING_DIR
            if [ ! -d "venv" ]; then
              python3 -m venv venv
            fi
            source venv/bin/activate
            pip install --upgrade pip
            pip install -r requirements.txt

            cd $MANAGE_PATH
            python manage.py makemigrations
            python manage.py migrate
            python manage.py collectstatic --noinput

            sudo cp /home/ec2-user/service/$GUNICORN_SERVICE /etc/systemd/system/
            sudo cp /home/ec2-user/service/$GUNICORN_SOCKET /etc/systemd/system/
            sudo systemctl daemon-reload
            sudo systemctl start $GUNICORN_SOCKET
            sudo systemctl enable $GUNICORN_SOCKET
            sudo systemctl restart $GUNICORN_SERVICE

            sudo cp $NGINX_CONF_SRC $NGINX_CONF_DEST
            [ ! -L /etc/nginx/sites-enabled/$APP_NAME ] && sudo ln -s $NGINX_CONF_DEST /etc/nginx/sites-enabled/$APP_NAME
            sudo nginx -t
            sudo systemctl restart nginx
